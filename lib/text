import 'package:flutter/material.dart';

/// A customizable horizontal parallax carousel that supports various list types
///
/// This widget allows displaying a carousel of images with a parallax scrolling effect.
/// It supports customization of appearance, behavior, and provides optional features
/// like next item preview and page indicators.
///
/// Example usage:
/// ```dart
/// HorizontalParallaxCarousel<Location>(
///   items: locations,
///   imageExtractor: (location) => location.imageUrl,
///   height: 260,
///   showIndicator: true,
///   showNextItem: false,
/// )
/// ```
class HorizontalParallaxCarousel<T> extends StatefulWidget {
  /// The list of items to be displayed in the carousel
  final List<T> items;

  /// A function to extract the image URL from each item in the list
  final String Function(T item) imageExtractor;

  /// Height of the carousel container (default: 260)
  final double height;

  /// Width of each carousel item (default: 300)
  final double itemWidth;

  /// Padding around each carousel item (default: EdgeInsets.all(16.0))
  final EdgeInsets padding;

  /// Border radius for carousel items (default: 20)
  final double borderRadius;

  /// Enable/disable shadow effect on carousel items (default: true)
  final bool shadowEnable;

  /// Show preview of next item in the carousel (default: false)
  final bool showNextItem;

  /// Show page indicators at the bottom of the carousel (default: true)
  final bool showIndicator;

  const HorizontalParallaxCarousel({
    super.key,
    required this.items,
    required this.imageExtractor,
    this.height = 260,
    this.itemWidth = 300,
    this.padding = const EdgeInsets.all(16.0),
    this.borderRadius = 20,
    this.shadowEnable = true,
    this.showNextItem = false,
    this.showIndicator = true,
  });

  @override
  State<HorizontalParallaxCarousel<T>> createState() =>
      _HorizontalParallaxCarouselState<T>();
}

class _HorizontalParallaxCarouselState<T>
    extends State<HorizontalParallaxCarousel<T>> {
  /// Tracks the current page/index in the carousel
  late int _currentPage;

  @override
  void initState() {
    _currentPage = 0;
    super.initState();
  }

  @override
  Widget build(BuildContext context) {
    return SizedBox(
      height: widget.height,
      child: Stack(
        children: [
          /// Choose between ListView (show next item) or PageView (full page focus)
          widget.showNextItem
              ? ListView.builder(
                  scrollDirection: Axis.horizontal,
                  itemBuilder: (context, index) => _buildCarouselItem(index),
                  itemCount: widget.items.length,
                )
              : PageView.builder(
                  scrollDirection: Axis.horizontal,
                  onPageChanged: (int page) =>
                      setState(() => _currentPage = page),
                  itemBuilder: (context, index) => _buildCarouselItem(index),
                  itemCount: widget.items.length,
                ),

          /// Optional page indicator
          Visibility(
            visible: widget.showIndicator,
            child: Align(
              alignment: Alignment.bottomCenter,
              child: Padding(
                padding: const EdgeInsets.only(bottom: 28.0),
                child: Container(
                  padding: const EdgeInsets.all(4.0),
                  decoration: BoxDecoration(
                    color: Colors.black54,
                    borderRadius: BorderRadius.circular(16.0),
                  ),
                  child: Row(
                    mainAxisAlignment: MainAxisAlignment.center,
                    mainAxisSize: MainAxisSize.min,
                    children: List.generate(
                      widget.items.length,
                      (index) => AnimatedIndicator(
                        isSelected: index == _currentPage,
                      ),
                    ),
                  ),
                ),
              ),
            ),
          )
        ],
      ),
    );
  }

  /// Build individual carousel item with parallax effect
  Widget _buildCarouselItem(int index) {
    return CarouselItem(
      padding: widget.padding,
      borderRadius: widget.borderRadius,
      shadowEnable: widget.shadowEnable,
      itemWidth: widget.itemWidth,
      imagePath: widget.imageExtractor(widget.items[index]),
      items: widget.items,
    );
  }
}

/// A single carousel item with customizable appearance and parallax image
class CarouselItem extends StatelessWidget {
  final EdgeInsets padding;
  final double borderRadius;
  final bool shadowEnable;
  final double itemWidth;
  final String imagePath;
  final List items;

  const CarouselItem({
    super.key,
    required this.padding,
    required this.borderRadius,
    required this.shadowEnable,
    required this.itemWidth,
    required this.imagePath,
    required this.items,
  });

  @override
  Widget build(BuildContext context) {
    return Padding(
      padding: padding,
      child: Container(
        decoration: BoxDecoration(
          borderRadius: BorderRadius.circular(borderRadius),
          color: Colors.white,
          boxShadow: shadowEnable
              ? [
                  BoxShadow(
                    color: Colors.black.withOpacity(0.3),
                    blurRadius: 4,
                    offset: const Offset(0, 4),
                  ),
                ]
              : null,
        ),
        width: itemWidth,
        child: ClipRRect(
          borderRadius: BorderRadius.circular(borderRadius),
          child: ParallaxImage(imagePath: imagePath),
        ),
      ),
    );
  }
}

/// A widget that creates a parallax scrolling effect for images
class ParallaxImage extends StatelessWidget {
  /// Path/URL of the image to be displayed
  final String imagePath;

  const ParallaxImage({super.key, required this.imagePath});

  @override
  Widget build(BuildContext context) {
    final backgroundImageKey = GlobalKey();
    return Flow(
      delegate: HorizontalParallaxFlowDelegate(
        scrollable: Scrollable.of(context),
        listItemContext: context,
        backgroundImageKey: backgroundImageKey,
        widthFactor: 1.15,
      ),
      clipBehavior: Clip.antiAlias,
      children: [
        Image.network(
          imagePath,
          key: backgroundImageKey,
          fit: BoxFit.cover,
          loadingBuilder: (context, child, loadingProgress) {
            if (loadingProgress == null) return child;
            return Center(
              child: CircularProgressIndicator(
                value: loadingProgress.expectedTotalBytes != null
                    ? loadingProgress.cumulativeBytesLoaded /
                        loadingProgress.expectedTotalBytes!
                    : null,
              ),
            );
          },
          errorBuilder: (context, error, stackTrace) {
            return const Center(
              child: Icon(Icons.error, color: Colors.red),
            );
          },
        ),
      ],
    );
  }
}

/// Custom Flow Delegate to create horizontal parallax scrolling effect
class HorizontalParallaxFlowDelegate extends FlowDelegate {
  final ScrollableState scrollable;
  final BuildContext listItemContext;
  final GlobalKey backgroundImageKey;
  final double widthFactor;

  HorizontalParallaxFlowDelegate({
    required this.scrollable,
    required this.listItemContext,
    required this.backgroundImageKey,
    this.widthFactor = 1.2,
  }) : super(repaint: scrollable.position);

  @override
  BoxConstraints getConstraintsForChild(int i, BoxConstraints constraints) {
    return BoxConstraints.tightFor(
      height: constraints.maxHeight,
      width: constraints.maxWidth * widthFactor,
    );
  }

  @override
  void paintChildren(FlowPaintingContext context) {
    final scrollableBox = scrollable.context.findRenderObject()! as RenderBox;
    final listItemBox = listItemContext.findRenderObject()! as RenderBox;
    final listItemOffset = listItemBox.localToGlobal(
      listItemBox.size.centerLeft(Offset.zero),
      ancestor: scrollableBox,
    );

    final viewportDimension = scrollable.position.viewportDimension;
    final scrollFraction =
        (listItemOffset.dx / viewportDimension).clamp(0.0, 1.0);

    final horizontalAlignment = Alignment(scrollFraction * 2 - 1, 0.0);

    final backgroundSize =
        (backgroundImageKey.currentContext!.findRenderObject()! as RenderBox)
            .size;
    final listItemSize = context.size;
    final childRect = horizontalAlignment.inscribe(
      backgroundSize,
      Offset.zero & listItemSize,
    );

    context.paintChild(
      0,
      transform:
          Transform.translate(offset: Offset(childRect.left, 0.0)).transform,
    );
  }

  @override
  bool shouldRepaint(HorizontalParallaxFlowDelegate oldDelegate) {
    return scrollable != oldDelegate.scrollable ||
        listItemContext != oldDelegate.listItemContext ||
        backgroundImageKey != oldDelegate.backgroundImageKey;
  }
}

/// Animated page indicator with smooth transition
class AnimatedIndicator extends StatelessWidget {
  /// Indicates whether this indicator is currently selected
  final bool isSelected;

  const AnimatedIndicator({super.key, required this.isSelected});

  @override
  Widget build(BuildContext context) {
    return Padding(
      padding: const EdgeInsets.symmetric(horizontal: 4.0),
      child: AnimatedContainer(
        duration: const Duration(milliseconds: 300),
        height: 8,
        width: isSelected ? 36 : 8.0,
        decoration: BoxDecoration(
          color: isSelected ? Colors.white : Colors.grey,
          borderRadius: BorderRadius.circular(16.0),
        ),
      ),
    );
  }
}
